name: PyInstaller build

on: [push]

permissions:
  contents: write

jobs:
  build_ubuntu_20_04:
    runs-on: ubuntu-20.04
    if: ${{ !startsWith(github.ref, 'ref/heads/release') }}
    env:
      gpg_private_key: ${{ secrets.PACKAGESIGNKEY }}
      gpg_private_key_passphrase: ${{ secrets.PACKAGESIGNKEYPASSPHRASE }}
      update_api_push_token: ${{ secrets.UPDATE_API_DEPLOY_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.4.1
      - name: Setup Python 3.11 x64
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: "x64"
          cache: "poetry"
      - name: install dependencies
        run: poetry install --with build -E discord
      - name: Configure dev
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "VERSION_NUMBER=${{ github.sha }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.DEVELOPMENT_RELEASE_CHANNEL }}" >> $GITHUB_ENV
      - name: Configure release
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "VERSION_NUMBER=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.STABLE_RELEASE_CHANNEL }}" >> $GITHUB_ENV
      - name: Write version file
        run: |
          echo "[DEFAULT]" > version.ini
          echo "version_number=${{ env.VERSION_NUMBER }}" >> version.ini
          echo "release_channel=${{ env.RELEASE_CHANNEL }}" >> version.ini
          echo "upstream=${{ github.repository }}" >> version.ini
      # This only runs on development builds, please write release commits manually
      - name: Write commit file
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          git log --pretty="format:%H|||%cd|||%b|||%s" -15 --no-decorate --merges --grep="Merge pull request" --date=short > changelog.txt
      - name: Run PyInstaller
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: poetry run python3 -m PyInstaller Raingen.spec
        env:
          IS_RELEASE: 0
      - name: Run PyInstaller
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: poetry run python3 -m PyInstaller Raingen.spec
        env:
          IS_RELEASE: 1
      - name: Create archive (.tar.xz)
        run: tar -caf Raingen_Linux64_glibc2.31+.tar.xz -C dist Raingen
      - uses: actions/upload-artifact@v4
        with:
          name: Raingen_Linux64_glibc2.31+.tar.xz
          path: Raingen_Linux64_glibc2.31+.tar.xz
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: Raingen_Linux64_glibc2.31+.tar.xz

  build_ubuntu_22_04:
    runs-on: ubuntu-22.04
    if: ${{ !startsWith(github.ref, 'ref/heads/release') }}
    env:
      gpg_private_key: ${{ secrets.PACKAGESIGNKEY }}
      gpg_private_key_passphrase: ${{ secrets.PACKAGESIGNKEYPASSPHRASE }}
      update_api_push_token: ${{ secrets.UPDATE_API_DEPLOY_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.4.1
      - name: Setup Python 3.11 x64
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: "x64"
          cache: "poetry"
      - name: install dependencies
        run: poetry install --with build -E discord
      - name: Configure dev
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "VERSION_NUMBER=${{ github.sha }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.DEVELOPMENT_RELEASE_CHANNEL }}" >> $GITHUB_ENV
      - name: Configure release
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "VERSION_NUMBER=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.STABLE_RELEASE_CHANNEL }}" >> $GITHUB_ENV
      - name: Write version file
        run: |
          echo "[DEFAULT]" > version.ini
          echo "version_number=${{ env.VERSION_NUMBER }}" >> version.ini
          echo "release_channel=${{ env.RELEASE_CHANNEL }}" >> version.ini
          echo "upstream=${{ github.repository }}" >> version.ini
      # This only runs on development builds, please write release commits manually
      - name: Write commit file
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          git log --pretty=oneline -15 --no-decorate  --no-merges > changelog.txt
      - name: Run PyInstaller
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: poetry run python3 -m PyInstaller Raingen.spec
        env:
          IS_RELEASE: 0
      - name: Run PyInstaller
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: poetry run python3 -m PyInstaller Raingen.spec
        env:
          IS_RELEASE: 1
      - name: Create archive (.tar.xz)
        run: tar -caf Raingen_Linux64_glibc2.35+.tar.xz -C dist Raingen
      - uses: actions/upload-artifact@v4
        with:
          name: Raingen_Linux64_glibc2.35+.tar.xz
          path: Raingen_Linux64_glibc2.35+.tar.xz
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: Raingen_Linux64_glibc2.35+.tar.xz

  build_win32:
    runs-on: windows-2019
    if: ${{ !startsWith(github.ref, 'ref/heads/release') }}
    env:
      gpg_private_key: ${{ secrets.PACKAGESIGNKEY }}
      gpg_private_key_passphrase: ${{ secrets.PACKAGESIGNKEYPASSPHRASE }}
      update_api_push_token: ${{ secrets.UPDATE_API_DEPLOY_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python 3.8 x86
        uses: actions/setup-python@v5
        with:
          python-version: "3.8" # 3.8 to support older versions of Windows
          architecture: "x86"
      - name: Install poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: 1.4.1
      - name: Set up cargo cache
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: install dependencies
        run: poetry install --with build -E discord
      - name: Configure dev
        shell: bash
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "VERSION_NUMBER=${{ github.sha }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.DEVELOPMENT_RELEASE_CHANNEL }}" >> $GITHUB_ENV
      - name: Configure release
        shell: bash
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "VERSION_NUMBER=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.STABLE_RELEASE_CHANNEL }}" >> $GITHUB_ENV
      - name: Write version file
        shell: bash
        run: |
          echo "[DEFAULT]" > version.ini
          echo "version_number=${{ env.VERSION_NUMBER }}" >> version.ini
          echo "release_channel=${{ env.RELEASE_CHANNEL }}" >> version.ini
          echo "upstream=${{ github.repository }}" >> version.ini
      # This only runs on development builds, please write release commits manually
      - name: Write commit file
        shell: bash
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          git log --pretty="format:%H|||%cd|||%b|||%s" -15 --no-decorate --merges --grep="Merge pull request" --date=short > changelog.txt
      - name: Build self-updater binary
        shell: bash
        run: |
          cd self_updater
          cargo build --release
          cp target/release/self_updater.exe ../resources/
      - name: Run PyInstaller
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: poetry run PyInstaller Raingen.spec
        env:
          IS_RELEASE: 0
      - name: Run PyInstaller
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: poetry run PyInstaller Raingen.spec
        env:
          IS_RELEASE: 1
      - name: Create archive (.zip)
        run: |
          cp dist/Raingen/_internal/.itch.toml dist/ 
          tar.exe -a -c -f Raingen_Win32.zip -C dist Raingen .itch.toml
      - uses: actions/upload-artifact@v4
        with:
          name: Raingen_Win32
          path: Raingen_Win32.zip
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: Raingen_Win32.zip

  build_win64:
    runs-on: windows-latest
    if: ${{ !startsWith(github.ref, 'ref/heads/release') }}
    env:
      gpg_private_key: ${{ secrets.PACKAGESIGNKEY }}
      gpg_private_key_passphrase: ${{ secrets.PACKAGESIGNKEYPASSPHRASE }}
      update_api_push_token: ${{ secrets.UPDATE_API_DEPLOY_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: 1.4.1
      - name: Setup Python 3.8 x64
        uses: actions/setup-python@v5
        with:
          python-version: "3.8" # 3.8 to support older versions of Windows
          architecture: "x64"
          cache: "poetry"
      - name: Set up cargo cache
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: install dependencies
        run: poetry install --with build -E discord
      - name: Configure dev
        shell: bash
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "VERSION_NUMBER=${{ github.sha }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.DEVELOPMENT_RELEASE_CHANNEL }}" >> $GITHUB_ENV
      - name: Configure release
        shell: bash
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "VERSION_NUMBER=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.STABLE_RELEASE_CHANNEL }}" >> $GITHUB_ENV
      - name: Write version file
        shell: bash
        run: |
          echo "[DEFAULT]" > version.ini
          echo "version_number=${{ env.VERSION_NUMBER }}" >> version.ini
          echo "release_channel=${{ env.RELEASE_CHANNEL }}" >> version.ini
          echo "upstream=${{ github.repository }}" >> version.ini
      # This only runs on development builds, please write release commits manually
      - name: Write commit file
        shell: bash
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          git log --pretty="format:%H|||%cd|||%b|||%s" -15 --no-decorate --merges --grep="Merge pull request" --date=short > changelog.txt
      # Example of an upx install, also requires adding "--upx-dir upx-4.0.0-win64" to the pyinst run
      #- name: Setup UPX
      #  run: |
      #    curl -L -O https://github.com/upx/upx/releases/download/v4.0.0/upx-4.0.0-win64.zip
      #    tar.exe -x -v -f upx-4.0.0-win64.zip
      - name: Build self-updater binary
        shell: bash
        run: |
          cd self_updater
          cargo build --release
          cp target/release/self_updater.exe ../resources/
      - name: Run PyInstaller
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: poetry run PyInstaller Raingen.spec
        env:
          IS_RELEASE: 0
      - name: Run PyInstaller
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: poetry run PyInstaller Raingen.spec
        env:
          IS_RELEASE: 1
      - name: Create archive (.zip)
        run: |
          cp dist/Raingen/_internal/.itch.toml dist/ 
          tar.exe -a -c -f Raingen_Win64.zip -C dist Raingen .itch.toml
      - uses: actions/upload-artifact@v4
        with:
          name: Raingen_Win64
          path: Raingen_Win64.zip
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: Raingen_Win64.zip

  build_win64_py311:
    runs-on: windows-latest
    if: ${{ !startsWith(github.ref, 'ref/heads/release') }}
    env:
      gpg_private_key: ${{ secrets.PACKAGESIGNKEY }}
      gpg_private_key_passphrase: ${{ secrets.PACKAGESIGNKEYPASSPHRASE }}
      update_api_push_token: ${{ secrets.UPDATE_API_DEPLOY_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.4.1
      - name: Setup Python 3.11 x64
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: "x64"
          cache: "poetry"
      - name: Set up cargo cache
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: install dependencies
        run: poetry install --with build -E discord
      - name: Configure dev
        shell: bash
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "VERSION_NUMBER=${{ github.sha }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.DEVELOPMENT_RELEASE_CHANNEL }}" >> $GITHUB_ENV
      - name: Configure release
        shell: bash
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "VERSION_NUMBER=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.STABLE_RELEASE_CHANNEL }}" >> $GITHUB_ENV
      - name: Write version file
        shell: bash
        run: |
          echo "[DEFAULT]" > version.ini
          echo "version_number=${{ env.VERSION_NUMBER }}" >> version.ini
          echo "release_channel=${{ env.RELEASE_CHANNEL }}" >> version.ini
          echo "upstream=${{ github.repository }}" >> version.ini
      # This only runs on development builds, please write release commits manually
      - name: Write commit file
        shell: bash
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          git log --pretty="format:%H|||%cd|||%b|||%s" -15 --no-decorate --merges --grep="Merge pull request" --date=short > changelog.txt
      # Example of an upx install, also requires adding "--upx-dir upx-4.0.0-win64" to the pyinst run
      #- name: Setup UPX
      #  run: |
      #    curl -L -O https://github.com/upx/upx/releases/download/v4.0.0/upx-4.0.0-win64.zip
      #    tar.exe -x -v -f upx-4.0.0-win64.zip
      - name: Build self-updater binary
        shell: bash
        run: |
          cd self_updater
          cargo build --release
          cp target/release/self_updater.exe ../resources/
      - name: Run PyInstaller
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: poetry run PyInstaller Raingen.spec
        env:
          IS_RELEASE: 0
      - name: Run PyInstaller
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: poetry run PyInstaller Raingen.spec
        env:
          IS_RELEASE: 1
      - name: Create archive (.zip)
        run: |
          cp dist/Raingen/_internal/.itch.toml dist/ 
          tar.exe -a -c -f Raingen_Win64_Windows10+.zip -C dist Raingen .itch.toml
      - uses: actions/upload-artifact@v4
        with:
          name: Raingen_Win64_Windows10+
          path: Raingen_Win64_Windows10+.zip
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: Raingen_Win64_Windows10+.zip

  build_macos64:
    # For commits to the original mac build action see:
    # https://github.com/ClanGenOfficial/clangen/blob/29c9e39fed9a09b8de906f5c3b91dc044fe9b9a5/.github/workflows/main.yml
    runs-on: macos-13
    if: ${{ !startsWith(github.ref, 'ref/heads/release') }}
    env:
      gpg_private_key: ${{ secrets.PACKAGESIGNKEY }}
      gpg_private_key_passphrase: ${{ secrets.PACKAGESIGNKEYPASSPHRASE }}
      update_api_push_token: ${{ secrets.UPDATE_API_DEPLOY_KEY }}
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: 1.7.1
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "poetry"
      - name: install dependencies
        run: poetry install --with build -E discord
      - name: Configure dev
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "VERSION_NUMBER=${{ github.sha }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.DEVELOPMENT_RELEASE_CHANNEL }}" >> $GITHUB_ENV
      - name: Configure release
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "VERSION_NUMBER=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.STABLE_RELEASE_CHANNEL }}" >> $GITHUB_ENV
      - name: Write version file
        run: |
          echo "[DEFAULT]" > version.ini
          echo "version_number=${{ env.VERSION_NUMBER }}" >> version.ini
          echo "release_channel=${{ env.RELEASE_CHANNEL }}" >> version.ini
          echo "upstream=${{ github.repository }}" >> version.ini
      # This only runs on development builds, please write release commits manually
      - name: Write commit file
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          git log --pretty="format:%H|||%cd|||%b|||%s" -15 --no-decorate --merges --grep="Merge pull request" --date=short > changelog.txt
      - name: Run PyInstaller
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: poetry run python -m PyInstaller Raingen.spec
        env:
          IS_RELEASE: 0
      - name: Run PyInstaller
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: poetry run python -m PyInstaller Raingen.spec
        env:
          IS_RELEASE: 1
      - name: Create archive (.tar.xz)
        run: rm -r dist/Raingen
      - name: Install appdmg
        run: "npm install -g appdmg"
      - name: Generate .dmg
        run: "appdmg appdmg.json Raingen_macOS64.dmg"
      - uses: actions/upload-artifact@v4
        with:
          name: Raingen_macOS64.dmg
          path: Raingen_macOS64.dmg
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: Raingen_macOS64.dmg
